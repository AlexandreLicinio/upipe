
@section TPH {Rules}

  Upipe also defines semantic rules to correctly use the syntactic structures described in the previous chapters.

  @section T {Pipes}

    The following rules apply to @ref upipe:

    @list

      @item All methods of @ref upipe must be called from the same thread. As an exception, it is possible to allocate and configure a pipe in one thread, and migrate it to another thread afterwards, but a pipe is not required to be reentrant, nor to handle memory protection. This also applies to input and output subpipes of a pipe, which run in the same thread as the pipe. Also, for the same reason, it is not recommended to create loops in the dataflow.

      @item A @ref upipe shall throw @ref upipe_throw_ready as soon as it is ready to receive inputs and control commands, and before sending any other probe, including log messages.

      @item A @ref upipe shall throw @ref upipe_throw_dead when it does no longer wish to receive inputs and control commands; it shall not send any other probe afterwards, including log messages.

      @item A @ref upipe throwing @ref #upipe_throw_aerror shall not longer receive any input nor control command; it can only be released.

      @item Only one pipe at time may call @ref upipe_input on a given @ref upipe. Pipes are not required to support multiple inputs. If multiple inputs are needed, they should be created using @ref upipe_void_alloc_sub or @ref upipe_flow_alloc_sub.

      @item A @ref upipe may only send its output to one pipe. If multiple outputs are needed, they should be created using @ref upipe_alloc_sub (and it is up to the pipe to decide which packets to send where).

      @item A @ref upipe shall not use a blocking system call. It should register a file descriptor or a timer with @ref upump_alloc_fd_read, @ref upump_alloc_fd_write, or @ref upump_alloc_timer.

      @item Managers for various control structures (@ref uref_mgr, @ref ubuf_mgr, @ref upump_mgr, etc.) passed to a pipe shouldn't be set to NULL after having been set to a vlue different from NULL.

      @item The @ref upump passed to @ref upipe_input is only valid for the time of execution of @ref upipe_input, and mustn't be kept by any downstream pipe.

      @item The @ref uref passed to @ref upipe_input belongs to the callee, and must be freed at some point.

      @item All parameters to @ref upipe_control and belong to the caller. The @ref upipe must either duplicate or use (increment the refcount) structures it wants to keep. However if the control command is supposed to return information (such as control structures) from the @ref upipe, the structure belongs to the callee and should be duplicated or used, if required, by the caller.

    @end list

  @end section

  @section T {Probes}

    @list

      @item A @ref uprobe must be called from the same thread as the @ref upipe throwing the event; it is not required to be reentrant, nor to handle memory protection, but may opt to do so.

      @item A @ref uprobe shall not send control commands upon receiving a log event.

      @item All parameters to a @ref uprobe belong to the caller pipe, and should not be kept by the probe.

    @end list

  @end section

  @section T {Buffers}

    @list

      @item @ref ubuf_block_alloc shall not return a segmented block, ie. subsequent calls to @ref ubuf_block_read or @ref ubuf_block_write shall return the entire memory area.

    @end list

  @end section

@end section
